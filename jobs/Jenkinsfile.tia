pipeline {
    agent any
    tools {
        maven 'maven'
        jdk 'JDK 17'
    }
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
        
        // Ontly keep 5 jobs history and 2 jobs artifacts
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '2'))
    }
    parameters {
        string(name: 'LS_URL', defaultValue: '', description: 'Parasoft LS URL')
        string(name: 'CTP_URL', defaultValue: '', description: 'Parasoft CTP URL')
        string(name: 'DTP_URL', defaultValue: '', description: 'Parasoft DTP URL')
        string(name: 'DTP_USER', defaultValue: '', description: 'Parasoft DTP Username')
        string(name: 'DTP_PASS', defaultValue: '', description: 'Parasoft DTP Password')

        // Add other parameters as needed
    }
    environment {
        // App Settings
        app_name = 'spring-petclinic-microservices' // top level DTP Project
        services_list = "spring-petclinic-api-gateway,spring-petclinic-vets-service,spring-petclinic-visits-service,spring-petclinic-customers-service"
        envId = '32' // need to be dynamically acquired via curl

        // BuildId Timestamp
        //BUILD_TIMESTAMP = sh(script: 'date +%Y%m%d%H%M%S', returnStdout: true).trim()
        BUILD_TIMESTAMP = 'master-tia'
    }

    stages {
        stage('Set Up') {
            steps {
                // Clean workspace before build
                cleanWs()
                // Checkout project
                checkout([$class: 'GitSCM', 
                    branches: [[name: 'master']], 
                    userRemoteConfigs: [[url: 'https://github.com/gtrofimov/spring-petclinic-microservices.git']]])

                // set GID
                script {
                    env.GID = sh(script: 'id -g jenkins', returnStdout: true).trim()
                    env.PUBLIC_IP = sh(script: """curl -s https://httpbin.org/ip | jq -r '.origin'""", returnStdout: true).trim()
                }
                
                // set Licenses
                sh '''
                    # Set Up and write .properties file
                    echo $"
                    parasoft.eula.accepted=true

                    jtest.license.use_network=true
                    jtest.license.network.edition=custom_edition
                    jtest.license.custom_edition_features=Jtest, Static Analysis, Flow Analysis, OWASP Rules, CWE Rules, PCI DSS Rules, DISA STIG Rules, Security Rules, Automation, Desktop Command Line, DTP Publish, Coverage, Unit Test, Unit Test Bulk Creation, Unit Test Tier 1, Unit Test Tier 2, Unit Test Tier 3, Unit Test Tier 4, Unit Test Spring Framework, Change Based Testing
                    
                    license.network.use.specified.server=true
                    license.network.auth.enabled=true
                    license.network.url=${LS_URL}
                    license.network.user=${DTP_USER}
                    license.network.password=${DTP_PASS}
                    
                    dtp.url=${DTP_URL}
                    dtp.user=${DTP_USER}
                    dtp.password=${DTP_PASS}

                    report.scontrol=min
                    report.coverage.line.hashes=true
                    report.dtp.publish=true
                    " >> ./jtest/jtestcli.properties
                    '''

            }

            
        }
        stage('Build: Create Docker Images') {
            when { equals expected: true, actual: true }
            steps {

                // build the binaries
                echo "Building ${env.JOB_NAME}..."
                sh  '''

                    # Build the Maven package
                    export service="spring-petclinic-customers-service"
                    cd ${service}
                    mvn clean install -P buildDocker -DskipTests=true
                    '''
            }
        }
        stage('Build: Jtest UT + Static Cov') {
            when { equals expected: true, actual: true }
            steps {

                // Run Jtest Unit test with CC
                script {
                    def servicesArray = services_list.split(',')
                    for (def dir in servicesArray) {
                        // Setup stage-specific additional settings
                        sh '''
                            # Set Up and write .properties file
                            echo $"
                            dtp.project='''+dir+'''
                            build.id='''+dir+'''-${BUILD_TIMESTAMP}
                            report.coverage.images='''+dir+''';'''+dir+'''-UT
                            " >> ./jtest/jtestcli-ut.properties
                        '''
                                                sh '''
                            # Set Up and write .properties file
                            echo $"
                            dtp.project='''+dir+'''
                            build.id='''+dir+'''-${BUILD_TIMESTAMP}
                            report.coverage.images='''+dir+''';'''+dir+'''-FT
                            " >> ./jtest/jtestcli-ft.properties
                        '''
                        // Execute the build with Jtest Maven plugin in docker
                        sh '''
                            # Run Maven build with Jtest tasks via Docker
                            docker run \
                            -u ${UID}:${GID} \
                            --rm -i \
                            --name jtest \
                            -v "$PWD:$PWD" \
                            -w "$PWD/'''+dir+'''" \
                            $(docker build -q ./jtest) /bin/bash -c " \

                            # Package the application with the Jtest Monitor
                            mvn package jtest:monitor \
                            -s '../jtest/.m2/settings.xml' \
                            -Dmaven.test.skip=true \
                            -Djtest.settingsList='../jtest/jtestcli.properties,../jtest/jtestcli-ft.properties' \
                            -Djtest.showSettings=true \
                            -P buildDocker \
                            "
                        '''
                    }
                }

            }
        }
        stage('Deploy: Docker Compose + CTP') {
            when { equals expected: true, actual: true }
            steps {

                build job: 'master/Petclinic-deploy', parameters: [
                    string(name: 'CTP_URL', value: params.CTP_URL),
                    string(name: 'DTP_USER', value: params.DTP_USER),
                    string(name: 'DTP_PASS', value: params.DTP_PASS),
                    string(name: 'BUILD_TIMESTAMP', value: env.BUILD_TIMESTAMP),

                    // Add other parameters as needed
                ]
            }
        }
        stage('Test: Calculate Impacted Tests') {
            when { equals expected: true, actual: true}
            steps {
                // get Impacted Tests for current deployment and baseline build
                sh """
                    curl -X 'GET' \
                    -u '${DTP_USER}:${DTP_PASS}' \
                    -H 'accept: application/json' \
                    ${CTP_URL}/em/api/v3/environments/${envId}/coverage/impactedTests?baselineBuildId=latest  > impactedTests.json || true
                    """
                }                 
            }
        stage('Test: Run Optimized Suite') {
            when { equals expected: true, actual: true}
            steps {

                script {
                    // get list of impacted Test from Json file
                    def testNames = sh(script: "jq -r '.[] | select(.analysisType == \"FT\") | .testName' impactedTests.json | paste -sd \",\" -", returnStdout: true).trim()
                    
                    // Run Selenium tests with Maven using impactedTests as parameters
                    sh """
                        echo ${testNames}
                        cd spring-petclinic-selenium-tests
                        mvn clean test \
                        -DbaseUrl='http://${PUBLIC_IP}:8099' \
                        -DgridUrl='http://${PUBLIC_IP}:4444/wd/hub' \
                        -DenvId=${envId} \
                        -DctpUrl='${CTP_URL}' \
                        -Dtest='${testNames}'
                    """
                }                  
            }
        }
        stage('Release') {
            steps {
                
                //copyArtifacts(projectName: 'Petclinic-build', selector: lastSuccessful())
                //copyArtifacts(projectName: 'Petclinic-jtest', selector: lastSuccessful())
                recordParasoftCoverage pattern: '**/target/jtest/ut/coverage.xml'
            }   
        }
    }
    post {
        // Clean after build
        always {
            // delete Cov-tool stuff
            sh  '''
                echo "cleaning up..."
                # rm -rf "jtest_agent"
                # rm -rf "jtestcov"
                '''
        }
    }
}
