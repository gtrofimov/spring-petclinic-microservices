pipeline {
    agent any
    tools {
        maven 'maven'
        jdk 'JDK 17'
    }
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
        
        // Ontly keep 5 jobs history and 2 jobs artifacts
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '2'))
    }
    parameters {
        string(name: 'LS_URL', defaultValue: '', description: 'Parasoft LS URL')
        string(name: 'CTP_URL', defaultValue: '', description: 'Parasoft CTP URL')
        string(name: 'DTP_URL', defaultValue: '', description: 'Parasoft DTP URL')
        string(name: 'DTP_USER', defaultValue: '', description: 'Parasoft DTP Username')
        string(name: 'DTP_PASS', defaultValue: '', description: 'Parasoft DTP Password')

        // Add other parameters as needed
    }
    environment {
        // App Details
        app_name = 'spring-petclinic-microservices' // top level DTP Project
        services_list = "spring-petclinic-api-gateway,spring-petclinic-vets-service,spring-petclinic-visits-service,spring-petclinic-customers-service"
        
        // Parasoft Settings
        envId = '32' // need to be dynamically acquired via curl
        jtestUTConfig="jtest.builtin://Unit Tests"
        jtestSAConfig="jtest.builtin://Recommended Rules"

        // Dynamic configs
        BUILD_TIMESTAMP = 'v3'
        //BUILD_TIMESTAMP = sh(script: 'date +%Y%m%d%H%M', returnStdout: true).trim()
    }

    stages {
        stage('Set Up') {
            steps {
                // Clean workspace before build
                cleanWs()
                // Checkout project
                checkout([$class: 'GitSCM', 
                    branches: [[name: 'master']], 
                    userRemoteConfigs: [[url: 'https://github.com/gtrofimov/spring-petclinic-microservices.git']]])
                
                // set GID
                // set PUBLIC_IP
                script {
                    env.GID = sh(script: 'id -g jenkins', returnStdout: true).trim()
                    env.PUBLIC_IP = sh(script: """curl -s https://httpbin.org/ip | jq -r '.origin'""", returnStdout: true).trim()
                }

                // set up Parasoft License
                sh '''
                    # Set Up and write .properties file
                    echo $"
                    parasoft.eula.accepted=true
                    
                    jtest.license.use_network=true
                    jtest.license.network.edition=custom_edition
                    jtest.license.custom_edition_features=Jtest, Static Analysis, Flow Analysis, OWASP Rules, CWE Rules, PCI DSS Rules, DISA STIG Rules, Security Rules, Automation, Desktop Command Line, DTP Publish, Coverage, Unit Test, Unit Test Bulk Creation, Unit Test Tier 1, Unit Test Tier 2, Unit Test Tier 3, Unit Test Tier 4, Unit Test Spring Framework, Change Based Testing
                    
                    license.network.use.specified.server=true
                    license.network.auth.enabled=true
                    license.network.url=${LS_URL}
                    license.network.user=${DTP_USER}
                    license.network.password=${DTP_PASS}
                    
                    dtp.url=${DTP_URL}
                    dtp.user=${DTP_USER}
                    dtp.password=${DTP_PASS}
                    
                    report.scontrol=min
                    report.coverage.line.hashes=true
                    report.dtp.publish=true

                    # dtp.project=${app_name}
                    # build.id=${buildId}
                    # session.tag=${jtestSessionTag}
                    # report.associations=false
                    # report.coverage.images=${covImage}
                    # report.scontrol=full
                    # scope.local=true
                    # scope.scontrol=true
                    # scope.xmlmap=false
                    # scontrol.git.exec=git
                    # scontrol.rep1.git.branch=main
                    # scontrol.rep1.git.url=${project_repo}
                    # scontrol.rep1.type=git
                    " >> ./jtest/jtestcli.properties
                    '''                
            }
        }
        stage('Build: Create Docker Images') {
            when { equals expected: true, actual: true }
            steps {

                // build the binaries
                echo "Building ${env.JOB_NAME}..."
                sh  '''

                    # Build the Maven package
                    ./mvnw clean install -P buildDocker -DskipTests=true
                    '''
            }
        }
        stage('Build: Jtest UT + Static Cov') {
            when { equals expected: true, actual: true }
            steps {

                // Run Jtest Unit test with CC
                script {
                    def servicesArray = services_list.split(',')
                    for (def dir in servicesArray) {
                        // Setup stage-specific additional settings
                        sh '''
                            # Set Up and write .properties file
                            echo $"
                            dtp.project='''+dir+'''
                            build.id='''+dir+'''-${BUILD_TIMESTAMP}
                            " > ./jtest/jtestcli-sa.properties
                        '''
                        
                        sh '''
                            # Set Up and write .properties file
                            echo $"
                            dtp.project='''+dir+'''
                            build.id='''+dir+'''-${BUILD_TIMESTAMP}
                            report.coverage.images='''+dir+''';'''+dir+'''-UT
                            " >> ./jtest/jtestcli-ut.properties
                        '''
                        
                        sh '''
                            # Set Up and write .properties file
                            echo $"
                            dtp.project='''+dir+'''
                            build.id='''+dir+'''-${BUILD_TIMESTAMP}
                            report.coverage.images='''+dir+''';'''+dir+'''-FT
                            " >> ./jtest/jtestcli-ft.properties
                        '''
                        
                        // Execute the build with Jtest Maven plugin in docker
                        sh '''
                            # Run Maven build with Jtest tasks via Docker
                            docker run \
                            -u ${UID}:${GID} \
                            --rm -i \
                            --name jtest \
                            --network=demo-net \
                            -v "$PWD:$PWD" \
                            -w "$PWD/'''+dir+'''" \
                            $(docker build --build-arg HOST_UID="$UID" -q ./jtest) /bin/bash -c " \
                            
                            # Compile the project and run Jtest Static Analysis
                            mvn test-compile \
                            jtest:jtest \
                            -DskipTests=true \
                            -s /home/parasoft/.m2/settings.xml \
                            -Djtest.settingsList='../jtest/jtestcli.properties,../jtest/jtestcli-sa.properties' \
                            -Djtest.config='${jtestSAConfig}' \
                            -Djtest.report=./target/jtest/sa \
                            -Djtest.showSettings=true \

                            # Compile the test sources and run unit tests with Jtest
                            mvn jtest:agent \
                            test \
                            jtest:jtest \
                            -s '../jtest/.m2/settings.xml' \
                            -Dmaven.test.failure.ignore=true \
                            -Djtest.settingsList='../jtest/jtestcli.properties,../jtest/jtestcli-ut.properties' \
                            -Djtest.config='${jtestUTConfig}' \
                            -Djtest.report=./target/jtest/ut \
                            -Djtest.showSettings=true; \
                            
                            # Package the application with the Jtest Monitor
                            mvn package jtest:monitor \
                            -s '../jtest/.m2/settings.xml' \
                            -Dmaven.test.skip=true \
                            -Djtest.settingsList='../jtest/jtestcli.properties,../jtest/jtestcli-ft.properties' \
                            -Djtest.showSettings=true \
                            "
                        '''
                    }
                }

                // Parasoft Findings plugin for Unit Tests Results
                echo '---> Parsing 10.x unit test reports'
                script {
                    step([$class: 'XUnitPublisher', 
                        // thresholds: [failed(
                        //     failureNewThreshold: '0', 
                        //     failureThreshold: '0')
                        // ],
                        tools: [[$class: 'ParasoftType', 
                            deleteOutputFiles: true, 
                            failIfNotNew: false, 
                            pattern: '**/target/jtest/ut/*report*.xml', 
                            skipNoTestFiles: true, 
                            stopProcessingIfError: false
                        ]]
                    ])
                }

                // Parasoft Findings plugin for Code Coverage
                // pattern: '**/target/jtest/ut/*coverage*.xml'

            }
        }
        stage('Deploy: Docker Compose + CTP') {
            when { equals expected: true, actual: true }
            steps {

                build job: 'master/Petclinic-deploy', parameters: [
                    string(name: 'CTP_URL', value: params.CTP_URL),
                    string(name: 'DTP_USER', value: params.DTP_USER),
                    string(name: 'DTP_PASS', value: params.DTP_PASS),
                    string(name: 'BUILD_TIMESTAMP', value: env.BUILD_TIMESTAMP),

                    // Add other parameters as needed
                ]
            }
        }
        stage('Test: Full Selenium Suite') {
            when { equals expected: true, actual: true}
            steps {
                // Start Selenium grid
                // docker run -d -p 4444:4444 -p 7900:7900 selenium/standalone-chrome:latest
                
                // run Selenium tests
                sh """
                    cd spring-petclinic-selenium-tests
                    mvn clean test \
                    -DbaseUrl='http://${PUBLIC_IP}:8099' \
                    -DgridUrl='http://${PUBLIC_IP}:4444/wd/hub' \
                    -DenvId=${envId} \
                    -DctpUrl='${CTP_URL}'
                    """
                
                // Update Baseline build in CTP with latest
                sh """
                    curl -X DELETE -H 'accept: application/json' -u ${DTP_USER}:${DTP_PASS} ${CTP_URL}/em/api/v3/environments/${envId}/coverage/baselines/latest
                    curl -X POST -H 'accept: application/json' -H 'Content-Type: application/json' -u ${DTP_USER}:${DTP_PASS} ${CTP_URL}/em/api/v3/environments/${envId}/coverage/baselines/latest -d '"string"'
                    """
                
            } 
        }
        stage('Release') {
            steps {
                sh 'echo "Release"'
                //copyArtifacts(projectName: 'master/Petclinic-build', selector: lastSuccessful())
                //copyArtifacts(projectName: 'master/Petclinic-jtest', selector: lastSuccessful())
                //recordParasoftCoverage pattern: '**/target/jtest/ut/coverage.xml'
            }   
        }
    }
    post {
        // Clean after build
        always {
            // delete Cov-tool stuff
            sh  '''
                echo "cleaning up..."
                # rm -rf "jtest_agent"
                # rm -rf "jtestcov"
                '''
        }
    }
}
