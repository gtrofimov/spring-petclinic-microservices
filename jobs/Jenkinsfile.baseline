pipeline {
    agent any
    tools {
        maven 'maven'
        jdk 'JDK 17'
    }
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
        
        // Ontly keep 5 jobs history and 2 jobs artifacts
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '2'))
    }
    parameters {
        string(name: 'LS_URL', defaultValue: '', description: 'Parasoft LS URL')
        string(name: 'CTP_URL', defaultValue: '', description: 'Parasoft CTP URL')
        string(name: 'DTP_URL', defaultValue: '', description: 'Parasoft DTP URL')
        string(name: 'DTP_USER', defaultValue: '', description: 'Parasoft DTP Username')
        string(name: 'DTP_PASS', defaultValue: '', description: 'Parasoft DTP Password')

        // Add other parameters as needed
    }
    environment {
        // App Settings
        app_name = 'spring-petclinic-microservices' // top level DTP Project

        // BuildId Timestamp
        //BUILD_TIMESTAMP = sh(script: 'date +%Y%m%d%H%M%S', returnStdout: true).trim()
        BUILD_TIMESTAMP = 'latest'
    
    }

    stages {
        stage('Set Up') {
            steps {
                // Clean workspace before build
                cleanWs()
                // Checkout project
                checkout([$class: 'GitSCM', 
                    branches: [[name: 'master']], 
                    userRemoteConfigs: [[url: 'https://github.com/gtrofimov/spring-petclinic-microservices.git']]])

                // set GID
                script {
                    env.GID = sh(script: 'id -g jenkins', returnStdout: true).trim()
                }                
            }
        }
        stage('Build: Create Docker Images') {
            when { equals expected: true, actual: false }
            steps {
                
                build job: 'Petclinic-build', parameters: []

            }
        }
        stage('Build: Jtest UT + Static Cov') {
            when { equals expected: true, actual: true }
            steps {
                
                build job: 'Petclinic-jtest', parameters: [
                    string(name: 'LS_URL', value: params.LS_URL),
                    string(name: 'CTP_URL', value: params.CTP_URL),
                    string(name: 'DTP_URL', value: params.DTP_URL),
                    string(name: 'DTP_USER', value: params.DTP_USER),
                    string(name: 'DTP_PASS', value: params.DTP_PASS),
                    string(name: 'BUILD_TIMESTAMP', value: env.BUILD_TIMESTAMP),
                   // Add other parameters as needed
                ]

            }
        }
        stage('Deploy: Docker Compose + CTP') {
            when { equals expected: true, actual: true }
            steps {

                build job: 'Petclinic-deploy', parameters: [
                    string(name: 'CTP_URL', value: params.CTP_URL),
                    string(name: 'DTP_USER', value: params.DTP_USER),
                    string(name: 'DTP_PASS', value: params.DTP_PASS),
                    string(name: 'BUILD_TIMESTAMP', value: env.BUILD_TIMESTAMP),

                    // Add other parameters as needed
                ]
            }
        }
        stage('Test: Full Selenium Suite') {
            when { equals expected: true, actual: true}
            steps {
                // Params: GRID_URL, APP_URL, CTP_URL, ENV_NAME, BaselineId             
                build job: 'Petclinic-test', parameters: [
                    string(name: 'CTP_URL', value: params.CTP_URL),
                    string(name: 'DTP_USER', value: params.DTP_USER),
                    string(name: 'DTP_PASS', value: params.DTP_PASS),

                    // Add other parameters as needed
                ]
            }
        }
        stage('Release') {
            steps {
                
                //copyArtifacts(projectName: 'Petclinic-build', selector: lastSuccessful())
                copyArtifacts(projectName: 'Petclinic-jtest', selector: lastSuccessful())
                recordParasoftCoverage pattern: '**/target/jtest/ut/coverage.xml'
            }   
        }
    }
    post {
        // Clean after build
        always {
            script {
            // delete Cov-tool stuff
            sh  '''
                echo "cleaning up..."
                # rm -rf "jtest_agent"
                # rm -rf "jtestcov"
                '''
        
            }
        }
    }
}
