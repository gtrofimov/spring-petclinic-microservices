def ARRAY

pipeline {
    agent any
    tools {
        maven 'maven'
        jdk 'JDK 17'
    }
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
        
        // Ontly keep 5 jobs history and 2 jobs artifacts
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '2'))
    }
    parameters {
        string(name: 'LS_URL', description: 'Parasoft LS URL')
        string(name: 'CTP_URL', description: 'Parasoft CTP URL')
        string(name: 'DTP_URL', description: 'Parasoft DTP URL')
        string(name: 'DTP_USER', description: 'Parasoft DTP Username')
        string(name: 'DTP_PASS', description: 'Parasoft DTP Password')
        //string(name: 'ENV_NAME', defaultValue: 'Local PetClinic', description: 'Environment Name')
        //string(name: 'SERVICES_ARRAY', defaultValue: '', description: 'Array of services')
        //string(name: 'PORTS', defaultValue: '', description: 'Ports')

        // Add other parameters as needed
    }
    environment {
        // App Settings
        app_name = 'spring-petclinic-microservices' // top level DTP Project
        ENV_NAME = 'Local PetClinic' // no longer makes sense
        envId = '32' // need to be dynamically acquired via curl
        //covImage='SeleniumTests'
        sessionTag='jenkins-build'

        // Build Controls
        BASELINE_ID='latest'
        lastSuccessfulBaselineId='latest'
    }

    stages {
        stage('Set Up') {
            steps {
                // Clean before build
                cleanWs()

                // Checkout project
                checkout scm
                
                // set GID
                script {
                    env.GID = sh(script: 'id -g jenkins', returnStdout: true).trim()
                }
                                             
                // get Impacted Tests for current deployment and baseline build
                sh """
                    curl -X 'GET' \
                    -u '${DTP_USER}:${DTP_PASS}' \
                    -H 'accept: application/json' \
                    ${CTP_URL}/em/api/v3/environments/${envId}/coverage/impactedTests?baselineBuildId=latest || true
                    """
                }
            }   
        
        stage('Test') {
            when { equals expected: true, actual: true}
            steps {
                // run Selenium tests
                // docker run -d -p 4444:4444 -p 7900:7900 selenium/standalone-chrome:latest
                sh """
                    cd spring-petclinic-selenium-tests
                    mvn clean test \
                    -DbaseUrl=http://${PUBLIC_IP}:8099 \
                    -DgridUrl=http://${PUBLIC_IP}:4444/wd/hub \
                    -DenvId=${envId} \
                    -DctpUrl=${CTP_URL}
                    """
                
                // Update Baseline build in CTP with latest
                sh """
                    curl -X DELETE -H 'accept: application/json' -u ${DTP_USER}:${DTP_PASS} ${CTP_URL}/em/api/v3/environments/${envId}/coverage/baselines/latest
                    curl -X POST -H 'accept: application/json' -H 'Content-Type: application/json' -u ${DTP_USER}:${DTP_PASS} ${CTP_URL}/em/api/v3/environments/${envId}/coverage/baselines/latest -d '"string"'
                    """
                
            }    
        }
    }
    post {

        // Clean after build
        always {
            sh  '''
                echo "cleaning up..."
                rm -rf "jtest_agent"
                rm -rf "jtestcov"
                '''
        }
    }
}
