def ARRAY

pipeline {
    agent any
    tools {
        maven 'maven'
        jdk 'JDK 17'
    }
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
 
        // Ontly keep 5 jobs history and 2 jobs artifacts
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '2'))
    }
    parameters {
        string(name: 'LS_URL', description: 'Parasoft LS URL')
        string(name: 'CTP_URL', description: 'Parasoft CTP URL')
        string(name: 'DTP_URL', description: 'Parasoft DTP URL')
        string(name: 'DTP_USER', description: 'Parasoft DTP Username')
        string(name: 'DTP_PASS', description: 'Parasoft DTP Password')
        //string(name: 'ENV_NAME', defaultValue: 'Local PetClinic', description: 'Environment Name')
        //string(name: 'SERVICES_ARRAY', defaultValue: '', description: 'Array of services')
        //string(name: 'PORTS', defaultValue: '', description: 'Ports')

        // Add other parameters as needed
    }
    environment {
        // App Settings
        app_name = 'spring-petclinic-microservices' // top level DTP Project
        jtestUTConfig="jtest.builtin://Unit Tests"
        TIMESTAMP = sh(script: 'date +%Y%m%d%H%M%S', returnStdout: true).trim()
        //service='foo' // why is this needed?
        services_list = "spring-petclinic-api-gateway,spring-petclinic-vets-service,spring-petclinic-visits-service,spring-petclinic-customers-service"
    }

    stages {
        stage('Set Up') {
            steps {
                // Clean before build
                cleanWs()

                // Checkout project
                checkout scm
                
                // set GID
                script {
                    env.GID = sh(script: 'id -g jenkins', returnStdout: true).trim()
                }
                // define services
                // script {
                //     ARRAY = [
                //         "spring-petclinic-api-gateway", 
                //         "spring-petclinic-vets-service", 
                //         "spring-petclinic-visits-service", 
                //         "spring-petclinic-customers-service"
                //         ]
                // }
                // set up configs
                sh '''
                    # Set Up and write .properties file
                    echo $"
                    parasoft.eula.accepted=true
                    jtest.license.use_network=true
                    jtest.license.network.edition=custom_edition
                    jtest.license.custom_edition_features=Jtest, Static Analysis, Flow Analysis, OWASP Rules, CWE Rules, PCI DSS Rules, DISA STIG Rules, Security Rules, Automation, Desktop Command Line, DTP Publish, Coverage, Unit Test, Unit Test Bulk Creation, Unit Test Tier 1, Unit Test Tier 2, Unit Test Tier 3, Unit Test Tier 4, Unit Test Spring Framework, Change Based Testing
                    license.network.use.specified.server=true
                    license.network.auth.enabled=true
                    license.network.url=${LS_URL}
                    license.network.user=${DTP_USER}
                    license.network.password=${DTP_PASS}

                    # report.associations=false
                    # report.coverage.images=${covImage}
                    report.scontrol=min
                    report.coverage.line.hashes=true
                    # report.scontrol=full
                    # scope.local=true
                    # scope.scontrol=true
                    # scope.xmlmap=false
                    
                    # scontrol.git.exec=git
                    # scontrol.rep1.git.branch=main
                    # scontrol.rep1.git.url=${project_repo}
                    # scontrol.rep1.type=git

                    # build.id=${buildId}
                    # session.tag=${jtestSessionTag}
                    dtp.url=${DTP_URL}
                    dtp.user=${DTP_USER}
                    dtp.password=${DTP_PASS}
                    # dtp.project=${app_name}" >> ./jtest/jtestcli.properties
                    '''
            }                
        }
        stage('Build') {
            when { equals expected: true, actual: true }
            steps {

                // Run Jtest Unit test with CC
                script {
                    def servicesArray = services_list.split(',')
                    for (def dir in servicesArray) {
                        // Setup stage-specific additional settings
                        sh '''
                            # Set Up and write .properties file
                            echo $"
                            dtp.project='''+dir+'''
                            build.id='''+dir+'''-${TIMESTAMP}
                            report.coverage.images=${project_name};'''+dir+''';'''+dir+'''-UT
                            " >> ./jtest/jtestcli-ut.properties
                        '''
                        // Execute the build with Jtest Maven plugin in docker
                        sh '''
                            # Run Maven build with Jtest tasks via Docker
                            docker run \
                            -u ${UID}:${GID} \
                            --rm -i \
                            --name jtest \
                            -v "$PWD:$PWD" \
                            -v "$PWD:$PWD" \
                            -w "$PWD/'''+dir+'''" \
                            $(docker build -q ./jtest) /bin/bash -c " \

                            # Compile the test sources and run unit tests with Jtest
                            mvn test-compile \
                            jtest:agent \
                            test \
                            jtest:jtest \
                            -s jtest/.m2/settings.xml \
                            -Dmaven.test.failure.ignore=true \
                            -Djtest.settingsList='../jtest/jtestcli.properties,../jtest/jtestcli-ut.properties' \
                            -Djtest.config='${jtestUTConfig}' \
                            -Djtest.report=./target/jtest/ut \
                            -Djtest.showSettings=true \
                            -Djtest.report.dtp.publish=true \
                            "
                        '''
                    }
                }
                
                echo '---> Parsing 10.x unit test reports'
                script {
                    step([$class: 'XUnitPublisher', 
                        // thresholds: [failed(
                        //     failureNewThreshold: '0', 
                        //     failureThreshold: '0')
                        // ],
                        tools: [[$class: 'ParasoftType', 
                            deleteOutputFiles: true, 
                            failIfNotNew: false, 
                            pattern: '**/target/jtest/ut/*report*.xml', 
                            skipNoTestFiles: true, 
                            stopProcessingIfError: false
                        ]]
                    ])
                }

            }
        }
    }
    post {
        // Clean after build
        success {
            archiveArtifacts(artifacts: ''' 
                    **/target/*.jar, 
                    ''',
                fingerprint: true, 
                onlyIfSuccessful: true,
            )
        }

        always {            
            
            sh  '''
                echo "cleaning up..."
                rm -rf "jtest_agent"
                rm -rf "jtestcov"
                
                # rm -rf ".jtest/cache"
                # rm -rf "*/*/*/.jtest/cache"
                '''
        }
    }
}
