pipeline {
    agent any
    tools {
        maven 'maven'
        jdk 'JDK 17'
    }
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
        
        // Ontly keep 5 jobs history and 2 jobs artifacts
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '2'))
    }
    parameters {
        string(name: 'LS_URL', defaultValue: '', description: 'Parasoft LS URL')
        string(name: 'CTP_URL', defaultValue: '', description: 'Parasoft CTP URL')
        string(name: 'DTP_URL', defaultValue: '', description: 'Parasoft DTP URL')
        string(name: 'DTP_USER', defaultValue: 'demo', description: 'Parasoft DTP Username')
        string(name: 'DTP_PASS', defaultValue: 'demo-user', description: 'Parasoft DTP Password')
        //string(name: 'ENV_NAME', defaultValue: 'Local PetClinic', description: 'Environment Name')
        //string(name: 'SERVICES_ARRAY', defaultValue: '', description: 'Array of services')
        //string(name: 'PORTS', defaultValue: '', description: 'Ports')

        // Add other parameters as needed
    }
    environment {
        // App Settings
        app_name = 'spring-petclinic-microservices' // top level DTP Project

        // dynamic vars
        //BUILD_TIMESTAMP = sh(script: 'date +%Y%m%d%H%M%S', returnStdout: true).trim()
        BUILD_TIMESTAMP = 'latest-tia'
    
    }

    stages {
        stage('Set Up') {
            steps {
                // Clean before build
                cleanWs()
                // Checkout project
                checkout([$class: 'GitSCM', 
                    branches: [[name: 'master']], 
                    userRemoteConfigs: [[url: 'https://github.com/gtrofimov/spring-petclinic-microservices.git']]])

                // set GID
                script {
                    env.GID = sh(script: 'id -g jenkins', returnStdout: true).trim()
                }                
            }
        }
        stage('Build') {
            when { equals expected: true, actual: false }
            steps {
                
                // Params?
                build job: 'Petclinic-build', parameters: []

            }
        }
        stage('Build w/ Jtest') {
            when { equals expected: true, actual: true }
            steps {
                
                // Params?
                build job: 'Petclinic-jtest-tia', parameters: [
                    string(name: 'LS_URL', value: params.LS_URL),
                    string(name: 'CTP_URL', value: params.CTP_URL),
                    string(name: 'DTP_URL', value: params.DTP_URL),
                    string(name: 'DTP_USER', value: params.DTP_USER),
                    string(name: 'DTP_PASS', value: params.DTP_PASS),
                    string(name: 'BUILD_TIMESTAMP', value: env.BUILD_TIMESTAMP),
                    //string(name: 'ENV_NAME', value: params.ENV_NAME),
                    //string(name: 'SERVICES_ARRAY', value: params.SERVICES_ARRAY),
                    //string(name: 'PORTS', value: params.PORTS)
                    // Add other parameters as needed
                ]

            }
        }
        stage('Deploy') {
            when { equals expected: true, actual: true }
            steps {
                      
                // LS_URL, CTP_URL, DTP_URL, DTP_USER, DTP_PASS, Env Name, 
                // Services ARRAY
                // Ports
    
                build job: 'Petclinic-deploy', parameters: [
                    string(name: 'LS_URL', value: params.LS_URL),
                    string(name: 'CTP_URL', value: params.CTP_URL),
                    string(name: 'DTP_URL', value: params.DTP_URL),
                    string(name: 'DTP_USER', value: params.DTP_USER),
                    string(name: 'DTP_PASS', value: params.DTP_PASS),
                    string(name: 'BUILD_TIMESTAMP', value: env.BUILD_TIMESTAMP),
                    //string(name: 'ENV_NAME', value: params.ENV_NAME),
                    //string(name: 'SERVICES_ARRAY', value: params.SERVICES_ARRAY),
                    //string(name: 'PORTS', value: params.PORTS)
                    // Add other parameters as needed
                ]
            
            }
        }
        stage('Test') {
            when { equals expected: true, actual: true}
            steps {
                // run regression suite
                // Params: GRID_URL, APP_URL, CTP_URL, ENV_NAME, BaselineId             
                build job: 'Petclinic-test', parameters: [
                    string(name: 'LS_URL', value: params.LS_URL),
                    string(name: 'CTP_URL', value: params.CTP_URL),
                    string(name: 'DTP_URL', value: params.DTP_URL),
                    string(name: 'DTP_USER', value: params.DTP_USER),
                    string(name: 'DTP_PASS', value: params.DTP_PASS),
                    string(name: 'BUILD_TIMESTAMP', value: env.BUILD_TIMESTAMP),
                          //string(name: 'ENV_NAME', value: params.ENV_NAME),
                          //string(name: 'SERVICES_ARRAY', value: params.SERVICES_ARRAY),
                          //string(name: 'PORTS', value: params.PORTS)
                          // Add other parameters as needed
                ]

            }
        }
    }
    post {
        // Clean after build
        always {
            // delete Cov-tool stuff
            sh  '''
                echo "cleaning up..."
                rm -rf "jtest_agent"
                rm -rf "jtestcov"
                '''
        }
    }
}
